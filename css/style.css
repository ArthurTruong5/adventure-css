/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Universal selector */

* {
    margin: 0;
    padding: 0;
    /* change box model so that the border and the paddings are no longer added to the total width and the total height that is specified for the box. this doesn't add any paddings or width to the box */
    box-sizing: border-box;
}

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    font-size: 16px;
    line-height: 1.7;
    color: #777;
}

.header {
    /* 95% of the viewpoint height */
    height: 95vh;
    /* gradient will show from right to bottom */
    background-image: linear-gradient(to right bottom, #7ed56fd0, #55c57a8c), url(../img/hero.jpg);
    /* whatever the width of the viewpoint is, it tries to fit the element inside the box */
    background-size: cover;
    /* the image always stays the same on top of the container */
    background-position: top;
    /* polygons. adding cordinates  */
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    /* header is the parent element */
    position: relative;
}

.logo-box {
    /* use absolute positioning to put the image where we exactly want it to be. ALSO NOTE: that logo box is the child element thus position is aboluste */
    position: absolute;
    /* movement of logo */
    top: 40px;
    left: 40px;
}

.logo {
    /* change the image size of logo */
    height: 35px;
}

/* whats the best way to put shit in the middle? i used to just margin and pad it to the middle. fk i needed to use positioning? WTF? should have learnt css early lmao. sorry for any HR person looking at this. just very frustrated with css atm */

.text-box {
    /* child element */
    position: absolute;
    top: 45%;
    left: 50%;
    /* the 50% is no longer in relation to the parent element but from the element itself */
    transform: translate(-50%, -50%);
    text-align: center;
}

.heading-primary {
    color: #ffffff;
    /* change text to uppercase */
    text-transform: uppercase;
    /* since the main and sub are wrapped around the primary, we want the this to remain hidden so that our CSS animation aren't buggy. */
    backface-visibility: hidden;
    /* we want some whitespace */
    margin-bottom: 60px;
}

/* span by default is a inline element so its just like text */

.header-primary-main {
    /* do it doesnt align together and has its own block */
    display: block;
    font-weight: 400;
    font-size: 60px;
    /* spaces the letter */
    letter-spacing: 35px;
    /* kind of like invoking a function in javascript but with css lol  */
    animation-name: moveInLeft;
    /* duation of the animation */
    animation-duration: 2s;
    /* 
    we can also do animation delays too, like this
    animation-delay: 3s;
    ---
    we can iterate (loop) an animation
    animation-iteration-count: 3;
    ---
    animation progress through duration of a cycle. - look up MDN web docs for more info
    animation-timing-function: ease-in;
    */
}

.header-primary-sub {
    /* do it doesnt align together and has its own block */
    display: block;
    font-size: 20px;
    font-weight: 700;
    /* spaces the letter */
    letter-spacing: 17.4px;
    /* kind of like invoking a function in javascript but with css lol  */
    animation-name: moveInRight;
    animation-duration: 2s;
}

@keyframes moveInLeft {

    /* before the animation starts */
    /* NOTE: opacity is the transparency. 1 = full, 0 transparent or anything inbetween 0-1 */
    0% {
        opacity: 0;
        /* animate in the X direction - remember maths bro */
        transform: translateX(-100px);
    }

    80% {
        /* if we specify a positive value, it will go to the right side */
        transform: translateX(10px);
    }

    /* finished */
    100% {
        opacity: 1;
        /* goes back to being normal again */
        transform: translate(0);
    }
}

@keyframes moveInRight {

    /* before the animation starts */
    /* NOTE: opacity is the transparency. 1 = full, 0 transparent or anything inbetween 0-1 */
    0% {
        opacity: 0;
        /* animate in the X direction - remember maths bro */
        transform: translateX(100px);
    }

    80% {
        /* if we specify a positive value, it will go to the right side */
        transform: translateX(-10px);
    }

    /* finished */
    100% {
        opacity: 1;
        /* goes back to being normal again */
        transform: translate(0);
    }
}

@keyframes moveInBottom {

    /* before the animation starts */
    /* NOTE: opacity is the transparency. 1 = full, 0 transparent or anything inbetween 0-1 */
    0% {
        opacity: 0;
        /* animate in the X direction - remember maths bro */
        transform: translateY(30px);
    }

    /* finished */
    100% {
        opacity: 1;
        /* goes back to being normal again */
        transform: translate(0);
    }
}

/* pseudo class */

/* btn:link is the state of the hover selector */
/* btn:visited is the state when a user has already clicked the link */
.btn:link,
.btn:visited {
    text-transform: uppercase;
    /* gets rid of all the default css */
    text-decoration: none;
    /* makes the button bigger */
    padding: 15px 40px;
    /* right now the button is hovering over the text because its an inline element. inline-block fixes this */
    display: inline-block;
    border-radius: 100px;
    transition: all .2s;
    /* parent */
    position: relative;
}

.btn:hover {
    /* to move up we use a negative value */
    transform: translateY(-3px);
    /* we can manipulate where we want our shadows */
    box-shadow: 0 10px 20px rgba(0, 0, 0, .2);
}

/* when we click the button what happens huh? */
.btn:active {
    transform: translateY(-1px);
}

.btn-white {
    background-color: #fff;
    color: #777;
    animation-name: moveInBottom;
    animation-duration: 1s;
}

.btn::after {
    /* always have a content and display property when you this type of pseudo class */
    content: "";
    /* button has its in block yh boi */
    display: inline-block;
    /* 100% width of button */
    width: 100%;
    height: 100%;
    border-radius: 100px;
    /* child - finds the nearest relative */
    position: absolute;
    top: 0;
    left: 0;
    /* behind the button. we only want to see it if we hover over the button */
    z-index: -1;
    transition: all .4s
}

.btn-white::after {
    background-color: #fff;
}

.btn:hover::after {
    /* increases the element */
    transform: scaleX(1.4) scaleY(1.6);
    /* fade out */
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom .5s ease-out .75s;
    /* automatically apply the styles to 0% before the animation starts */
    animation-fill-mode: backwards;
}